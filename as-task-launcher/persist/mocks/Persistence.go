// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "aicsd/pkg/types"
)

// Persistence is an autogenerated mock type for the Persistence type
type Persistence struct {
	mock.Mock
}

// Create provides a mock function with given fields: task
func (_m *Persistence) Create(task types.Task) (string, error) {
	ret := _m.Called(task)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Task) (string, error)); ok {
		return rf(task)
	}
	if rf, ok := ret.Get(0).(func(types.Task) string); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(types.Task) error); ok {
		r1 = rf(task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *Persistence) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Disconnect provides a mock function with given fields:
func (_m *Persistence) Disconnect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Filter provides a mock function with given fields: task
func (_m *Persistence) Filter(task types.Task) ([]types.Task, error) {
	ret := _m.Called(task)

	var r0 []types.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Task) ([]types.Task, error)); ok {
		return rf(task)
	}
	if rf, ok := ret.Get(0).(func(types.Task) []types.Task); ok {
		r0 = rf(task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Task) error); ok {
		r1 = rf(task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *Persistence) GetAll() ([]types.Task, error) {
	ret := _m.Called()

	var r0 []types.Task
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]types.Task, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []types.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Task)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *Persistence) GetById(id string) (types.Task, error) {
	ret := _m.Called(id)

	var r0 types.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (types.Task, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) types.Task); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(types.Task)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: task
func (_m *Persistence) Update(task types.Task) error {
	ret := _m.Called(task)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Task) error); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPersistence interface {
	mock.TestingT
	Cleanup(func())
}

// NewPersistence creates a new instance of Persistence. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPersistence(t mockConstructorTestingTNewPersistence) *Persistence {
	mock := &Persistence{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
