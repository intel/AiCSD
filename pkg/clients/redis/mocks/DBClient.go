// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	redigoredis "github.com/gomodule/redigo/redis"
	mock "github.com/stretchr/testify/mock"
)

// DBClient is an autogenerated mock type for the DBClient type
type DBClient struct {
	mock.Mock
}

// Disconnect provides a mock function with given fields:
func (_m *DBClient) Disconnect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConnection provides a mock function with given fields:
func (_m *DBClient) GetConnection() redigoredis.Conn {
	ret := _m.Called()

	var r0 redigoredis.Conn
	if rf, ok := ret.Get(0).(func() redigoredis.Conn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(redigoredis.Conn)
		}
	}

	return r0
}

// TestConnection provides a mock function with given fields:
func (_m *DBClient) TestConnection() (redigoredis.Conn, error) {
	ret := _m.Called()

	var r0 redigoredis.Conn
	if rf, ok := ret.Get(0).(func() redigoredis.Conn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(redigoredis.Conn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDBClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewDBClient creates a new instance of DBClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDBClient(t mockConstructorTestingTNewDBClient) *DBClient {
	mock := &DBClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
