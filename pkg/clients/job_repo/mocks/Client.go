// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	types "aicsd/pkg/types"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Create provides a mock function with given fields: job
func (_m *Client) Create(job types.Job) (string, bool, error) {
	ret := _m.Called(job)

	var r0 string
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(types.Job) (string, bool, error)); ok {
		return rf(job)
	}
	if rf, ok := ret.Get(0).(func(types.Job) string); ok {
		r0 = rf(job)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(types.Job) bool); ok {
		r1 = rf(job)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(types.Job) error); ok {
		r2 = rf(job)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Delete provides a mock function with given fields: id
func (_m *Client) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RetrieveAll provides a mock function with given fields: headers
func (_m *Client) RetrieveAll(headers map[string]string) ([]types.Job, error) {
	ret := _m.Called(headers)

	var r0 []types.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]string) ([]types.Job, error)); ok {
		return rf(headers)
	}
	if rf, ok := ret.Get(0).(func(map[string]string) []types.Job); ok {
		r0 = rf(headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]string) error); ok {
		r1 = rf(headers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveAllByOwner provides a mock function with given fields: owner
func (_m *Client) RetrieveAllByOwner(owner string) ([]types.Job, error) {
	ret := _m.Called(owner)

	var r0 []types.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]types.Job, error)); ok {
		return rf(owner)
	}
	if rf, ok := ret.Get(0).(func(string) []types.Job); ok {
		r0 = rf(owner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveById provides a mock function with given fields: id
func (_m *Client) RetrieveById(id string) (types.Job, error) {
	ret := _m.Called(id)

	var r0 types.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (types.Job, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) types.Job); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(types.Job)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, jobFields
func (_m *Client) Update(id string, jobFields map[string]interface{}) (types.Job, error) {
	ret := _m.Called(id, jobFields)

	var r0 types.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) (types.Job, error)); ok {
		return rf(id, jobFields)
	}
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) types.Job); ok {
		r0 = rf(id, jobFields)
	} else {
		r0 = ret.Get(0).(types.Job)
	}

	if rf, ok := ret.Get(1).(func(string, map[string]interface{}) error); ok {
		r1 = rf(id, jobFields)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
