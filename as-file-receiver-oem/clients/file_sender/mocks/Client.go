// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// ArchiveFile provides a mock function with given fields: jobId
func (_m *Client) ArchiveFile(jobId string) error {
	ret := _m.Called(jobId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(jobId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Retry provides a mock function with given fields:
func (_m *Client) Retry() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransmitFile provides a mock function with given fields: jobId, fileId
func (_m *Client) TransmitFile(jobId string, fileId string) ([]byte, error) {
	ret := _m.Called(jobId, fileId)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]byte, error)); ok {
		return rf(jobId, fileId)
	}
	if rf, ok := ret.Get(0).(func(string, string) []byte); ok {
		r0 = rf(jobId, fileId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(jobId, fileId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
